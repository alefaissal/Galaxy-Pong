{"version":3,"sources":["src/settings.js","src/partials/Board.js","src/partials/Paddle.js","src/partials/Ball.js","src/partials/PowerUp.js","src/partials/Score.js","src/partials/Game.js","src/index.js"],"names":["SVG_NS","KEYS","a","z","up","down","spaceBar","Board","width","height","svg","rect","document","createElementNS","setAttributeNS","line","appendChild","Paddle","boardHeight","x","y","colour","upKey","downKey","speed","score","keyState","addEventListener","event","key","console","log","Ball","radius","boardWidth","direction","reset","finalX","finalY","ping","Audio","pingSound","vy","Math","floor","random","vx","abs","hitLeft","hitRight","hitTop","hitBottom","player1","player2","play","player","wallCollision","paddleCollision","circle","rightGoal","leftGoal","goal","PowerUp","args","Score","size","text","textContent","Game","element","gameElement","getElementById","board","paddleWidth","paddleHeight","boardGap","ballRadius","score1","score2","ball","pause","innerHTML","render","showBallXY","game","alert","gameLoop","requestAnimationFrame"],"mappings":"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","file":"src.5fe21b84.js","sourceRoot":"..","sourcesContent":["export const SVG_NS = \"http://www.w3.org/2000/svg\";\n\nexport const KEYS = {\n    a: \"a\",        // player 1 up key\n    z: \"z\",        // player 1 down key\n    up: \"ArrowUp\",       // player 2 up key\n    down: \"ArrowDown\",     // player 2 down key\n    spaceBar: \" \", // we'll use this later...\n};\n\n// With this option you need to change in Paddle,\n// all variables, and also import this there\n\n// export const paddleOptions = {\n//     paddleWidth: 8,\n//     paddleHeight: 56,\n//     boardGap: 10,\n// }\n","import { SVG_NS } from \"../settings\";\n\nexport default class Board {\n    constructor(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n    render(svg) {\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', '#353535');\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        let line = document.createElementNS(SVG_NS, 'line');\n        line.setAttributeNS(null, 'x1', (this.width / 2));\n        line.setAttributeNS(null, 'y1', 0);\n        line.setAttributeNS(null, 'x2', (this.width / 2));\n        line.setAttributeNS(null, 'y2', this.height);\n\n        line.setAttributeNS(null, 'stroke', 'white');\n        line.setAttributeNS(null, 'stroke-dasharray', '20, 15');\n        line.setAttributeNS(null, 'stroke-width', '4');\n\n        svg.appendChild(rect);\n        svg.appendChild(line);\n    }\n}","import { SVG_NS, KEYS } from \"../settings\";\n\nexport default class Paddle {\n    constructor(boardHeight, width, height, x, y, colour = 'white', upKey, downKey) {\n        this.boardHeight = boardHeight;\n        this.width = width;\n        this.height = height;\n        this.x = x;\n        this.y = y;\n        this.speed = 5;\n        this.score = 0;\n        this.colour = colour;\n        this.upKey = upKey;\n        this.downKey = downKey;\n\n        this.keyState = {};\n\n        document.addEventListener(\"keydown\", event => {\n            this.keyState[event.key] = true;\n        });\n\n        document.addEventListener(\"keyup\", event => {\n            this.keyState[event.key] = false;\n        });\n\n\n\n\n        // document.addEventListener(\"keydown\", event => {\n        //     switch (event.key) {\n        //         case up:\n        //             this.up();\n        //             break;\n        //         case down:\n        //             this.down();\n        //             break;\n        //     }\n        // });\n\n    }\n\n    up() {\n        if (this.y > 0) {\n            console.log('move up');\n            this.y = this.y - this.speed;\n        }\n        // this.y = Math.max(0, this.y - this.speed); /// another way to do it\n    }\n    down() {\n        if (this.y < (this.boardHeight - this.height)) {\n            console.log(\"move down\");\n            this.y = this.y + this.speed;\n        }\n        // this.y = Math.min(this.y + this.speed, this.boardHeight - this.height);\n\n    }\n\n    render(svg) {\n\n        if (this.keyState[KEYS.a] && this.upKey === KEYS.a) {\n            this.up();\n        }\n        if (this.keyState[KEYS.z] && this.downKey === KEYS.z) {\n            this.down();\n        }\n        if (this.keyState[KEYS.up] && this.upKey === KEYS.up) {\n            this.up();\n        }\n        if (this.keyState[KEYS.down] && this.downKey === KEYS.down) {\n            this.down();\n        }\n\n\n        let rect = document.createElementNS(SVG_NS, 'rect');\n        rect.setAttributeNS(null, 'fill', this.colour);\n\n        rect.setAttributeNS(null, 'width', this.width);\n        rect.setAttributeNS(null, 'height', this.height);\n\n        rect.setAttributeNS(null, \"x\", this.x);\n        rect.setAttributeNS(null, \"y\", this.y);\n\n        svg.appendChild(rect);\n    }\n}","import { SVG_NS } from \"../settings\";\nimport Board from \"./Board\";\nimport Game from \"./Game\";\nimport pingSound from \"../../public/sounds/pong-01.wav\";\nimport pingSound2 from \"../../public/sounds/pong-02.wav\";\n//import { runInThisContext } from \"vm\";\n\nexport default class Ball {\n    constructor(radius, boardWidth, boardHeight, colour = \"white\") {\n        this.radius = radius;\n        this.boardWidth = boardWidth;\n        this.boardHeight = boardHeight;\n        this.direction = 1; //used in vx to set the direction to the right\n        this.colour = colour;\n\n        this.reset();\n\n        this.finalX;\n        this.finalY;\n\n        this.ping = new Audio(pingSound);\n\n    }\n\n    reset() {\n        this.x = this.boardWidth / 2;\n        this.y = this.boardHeight / 2;\n\n        this.vy = 0;\n        while (this.vy === 0) {\n            this.vy = (Math.floor(Math.random() * 10 - 5));  // can take the Math.floor off \n        }\n        console.log(\"vy\", this.vy);\n\n        // this.vx = 0;\n        // while (this.vx === 0) {\n        this.vx = (this.direction * (6 - Math.abs(this.vy))) * (this.boardWidth / 512);\n        // }\n        console.log(\"vx\", this.vx);\n\n        this.finalX = this.x;\n        this.finalY = this.y;\n    }\n\n    wallCollision() {\n        const hitLeft = this.x - this.radius <= 0;\n        const hitRight = this.x + this.radius >= this.boardWidth;\n        const hitTop = this.y - this.radius <= 0;\n        const hitBottom = this.y + this.radius >= this.boardHeight;\n\n        if (hitLeft || hitRight) {\n            this.vx = -this.vx;\n        } else if (hitTop || hitBottom) {\n            this.vy *= -1;        // should keep in the same way before, but just for teaching purpose.\n        }\n\n        this.finalX = this.x;\n        this.finalY = this.y;\n    }\n\n    paddleCollision(player1, player2) {\n        if ((this.y >= player2.y && this.y <= player2.y + player2.height) ||\n            (this.y >= player1.y && this.y <= player1.y + player2.height)) {\n            if (this.vx > 0) {\n                if (this.x + this.radius >= player2.x &&\n                    this.x + this.radius <= player2.x + player2.width) {\n                    this.vx = -this.vx;\n                    this.ping.play();\n                }\n            } else {\n                if (this.x - this.radius <= player1.x + player1.width &&\n                    this.x - this.radius >= player1.x) {\n                    this.vx = -this.vx;\n                    this.ping.play();\n                }\n            }\n        }\n        this.finalX = this.x;\n        this.finalY = this.y;\n\n    }\n\n    goal(player) {\n        player.score++;\n        this.reset();\n\n        console.log(player.score);\n    }\n\n    render(svg, player1, player2) {\n\n        this.x += this.vx;\n        this.y += this.vy;\n\n\n        this.wallCollision();\n        this.paddleCollision(player1, player2);\n\n        let circle = document.createElementNS(SVG_NS, 'circle');\n        circle.setAttributeNS(null, 'fill', this.colour);\n        circle.setAttributeNS(null, 'r', this.radius);\n        circle.setAttributeNS(null, 'cx', this.x);\n        circle.setAttributeNS(null, 'cy', this.y);\n        svg.appendChild(circle);\n\n\n        const rightGoal = this.x + this.radius >= this.boardWidth;\n        const leftGoal = this.x - this.radius <= 0;\n\n        if (rightGoal) {\n            this.goal(player1);\n            this.direction = 1;\n\n        } else if (leftGoal) {\n            this.goal(player2);\n            this.direction = -1;\n        }\n    }\n\n\n}\n","import { SVG_NS } from \"../settings\";\nimport Ball from './Ball';\n\nexport default class PowerUp extends Ball {\n    constructor(...args) {\n        super(...args);\n    }\n\n}","import { SVG_NS } from \"../settings\";\n\nexport default class Score {\n  constructor(x, y, size, colour) {\n    this.x = x;\n    this.y = y;\n    this.size = size;  // font-size\n    this.colour = colour;\n  }\n\n\n  //...\n  render(svg, score) {\n    let text = document.createElementNS(SVG_NS, 'text');\n\n    text.setAttributeNS(null, 'x', this.x);\n    text.setAttributeNS(null, 'y', this.y);\n    text.setAttributeNS(null, 'font-size', this.size);\n    text.setAttributeNS(null, 'fill', this.colour);\n    text.setAttributeNS(null, 'font-family', '\"Silkscreen Web\", monotype');\n\n    text.textContent = score;\n    svg.appendChild(text);\n\n  }\n\n}","import Board from './Board';\nimport Paddle from './Paddle';\nimport Ball from './Ball';\nimport PowerUp from './PowerUp';\nimport Score from './Score';\nimport { SVG_NS, KEYS } from \"../settings\";\n\nexport default class Game {\n\n  constructor(element, width, height) {\n    this.element = element;\n    this.width = width;\n    this.height = height;\n\n    this.gameElement = document.getElementById(this.element);\n    this.board = new Board(this.width, this.height);\n\n    this.paddleWidth = 8 * (width / 512); /// think about this more.\n    this.paddleHeight = 56 * (width / 512);\n    this.boardGap = 10 * (width / 512);\n\n    this.ballRadius = 6 * (width / 512);\n\n    this.player1 = new Paddle(\n      this.height,\n      this.paddleWidth,\n      this.paddleHeight,\n      this.boardGap,\n      ((this.height - this.paddleHeight) / 2),\n      \"red\",\n      KEYS.a,\n      KEYS.z\n    );\n\n    this.player2 = new Paddle(\n      this.height,\n      this.paddleWidth,\n      this.paddleHeight,\n      (this.width - (this.boardGap + this.paddleWidth)),\n      ((this.height - this.paddleHeight) / 2),\n      \"green\",\n      KEYS.up,\n      KEYS.down\n    );\n\n    // this.score1 = new Score(this.width / 2 - 60, 50, 40, 'skyblue');\n    // this.score2 = new Score(this.width / 2 + 30, 50, 40, 'skyblue');\n\n    this.score1 = new Score(this.width / 4 - 40, this.height / 2 + 40, 150, 'skyblue');\n    this.score2 = new Score(3 * this.width / 4 - 40, this.height / 2 + 40, 150, 'skyblue');\n\n    this.ball = new Ball(this.ballRadius, this.board.width, this.board.height, 'grey');\n\n    document.addEventListener('keydown', (event) => {\n      switch (event.key) {\n        case KEYS.spaceBar:\n          this.pause = !this.pause;\n          break;\n      }\n    });\n\n\n  }// end of constructor\n\n\n\n\n  showBallXY(ball) {\n    ball = this.ball;\n    let text = document.getElementById(\"ballXY\");\n    text.innerHTML = \"Ball X = \" + ball.finalX + \" Ball Y = \" + ball.finalY;\n\n  }\n\n  render() {\n\n    if (this.pause) {\n      return;\n    }\n\n    this.gameElement.innerHTML = ''; // clear the html before appending to fix a render bug 🐞\n    let svg = document.createElementNS(SVG_NS, \"svg\");\n    svg.setAttributeNS(null, \"width\", this.width);\n    svg.setAttributeNS(null, \"height\", this.height);\n    svg.setAttributeNS(null, \"viewBox\", `0 0 ${this.width} ${this.height}`);\n    this.gameElement.appendChild(svg);\n    this.board.render(svg);\n    this.player1.render(svg);\n    this.player2.render(svg);\n    this.ball.render(svg, this.player1, this.player2);\n    this.showBallXY(svg, this.ball);\n    this.score1.render(svg, this.player1.score);\n    this.score2.render(svg, this.player2.score);\n\n  }\n\n\n\n\n}","import './styles/game.css';\nimport Game from './partials/Game';\n\n// create a game instance\nconst game = new Game('game', 1024, 512);\nalert('Use a and z for up and down Player One (left Paddle) and arrow up and arrow down for Player Two (left paddle)');\n\n(function gameLoop() {\n  game.render();\n  requestAnimationFrame(gameLoop);\n})();\n"]}